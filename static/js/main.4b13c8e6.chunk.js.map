{"version":3,"sources":["images/imageCard.jsx","App.jsx","deepFreeze.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","guess","clicked","shuffle","arr","i","j","temp","values","Object","toConsumableArray","length","Math","floor","random","App","_React$useState","React","useState","_React$useState2","slicedToArray","failure","setFailure","_React$useState3","_React$useState4","win","setWin","_React$useState5","deepFreeze","object","propNames","getOwnPropertyNames","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","freeze","imagesJson","_React$useState6","images","updateImages","map","imageCard","id","key","newImage","objectSpread","newArr","concat","filter","reduce","acc","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4b13c8e6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={() => props.guess()} className={props.clicked? \"cheat\": \"\"} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport imagesJson from \"./image.json\";\nimport { deepFreeze } from \"./deepFreeze\";\nimport ImageCard from \"./images/imageCard\";\n\nfunction shuffle(arr) {\n  const values = [...arr];\n  let i, j, temp;\n  for (i = values.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    temp = values[i];\n    values[i] = values[j];\n    values[j] = temp;\n  }\n  return values;\n}\n\nfunction App() {\n  const [failure, setFailure] = React.useState(false);\n  const [win, setWin] = React.useState(false);\n\n  const [images, updateImages] = React.useState(deepFreeze(imagesJson));\n  return (\n    <div>\n      <div>\n        <nav className=\"navbar navbar-expand-lg\">\n          <div className=\"container-fluid\">\n          <ul className=\"nav navbar-nav\">\n            <li className=\"brand\">\n              <h1>Memory Game</h1>\n            </li>\n            </ul>\n            <ul className=\"nav navbar-nav navbar-right\">\n\n            <li className=\"restartB\">\n              <button\n                onClick={() => {\n                  setFailure(false);\n                  setWin(false);\n                  updateImages(shuffle(imagesJson));\n                }}\n              >Restart</button>\n            </li>\n          </ul>\n          </div>\n        </nav>\n\n        <header className=\"header\">\n          {failure && <h1>Incorrect guess. Please restart to play again.</h1>}\n          {win && (\n            <h1>You win! Have a virtual cookie! Restart to play again.</h1>\n          )}\n        </header>\n\n        <div className=\"cards\">\n          {images.map((image, i) => (\n            <ImageCard\n              id={image.id}\n              key={image.id}\n              image={image.image}\n              clicked={image.clicked}\n              guess={() => {\n                if (win) {\n                  return;\n                }\n                if (failure) {\n                  return;\n                }\n                if (image.clicked) {\n                  setFailure(true);\n                  return;\n                }\n                const newImage = {\n                  ...image,\n                  clicked: true\n                };\n                // const newArr = shuffle(images.map(image => {\n                //   if (image.id === newImage.id) {\n                //     return newImage\n                //   }\n                //   return image;\n                // }));\n                const newArr = shuffle([\n                  newImage,\n                  ...images.filter(image => image.id !== newImage.id)\n                ]);\n\n                if (newArr.filter(image => image.clicked === true ).length === 12) {\n                  setWin(true);\n                }\n                updateImages(newArr);\n              }}\n            />\n          ))}\n        </div>\n\n        <div className=\"score\">\n          <h1>\n            Score:{\" \"}\n            {images.reduce((acc, image) => {\n              if (image.clicked) {\n                return acc + 1;\n              }\n              return acc;\n            }, 0)}\n          </h1>\n        </div>\n\n        <footer className=\"footer\">\n          <div className=\"bottom text-center\">Memory Game</div>\n          <div className=\"bottom text-center\">Lena Hamilton 2019</div>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\n// 1 images sho in random order\n// {this.state.numbers.map((num) => {\n//   return <RandomImage num={num} randomNumber={this.genNumber}/>\n// })}\n// 2 clicked turns true after clicked\n\n// 3 reload after click\n\n// 4 count number of trues\n\n// 5 if image clicked again fail\n// 6-extra welcome page w/ instructions\n\nexport default App;\n","export function deepFreeze(object) {\n\n    // Retrieve the property names defined on object\n    var propNames = Object.getOwnPropertyNames(object);\n  \n    // Freeze properties before freezing self\n    \n    for (let name of propNames) {\n      let value = object[name];\n  \n      if (typeof value === \"object\")\n        deepFreeze(value);\n    }\n  \n    return Object.freeze(object);\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}